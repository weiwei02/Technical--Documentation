<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd

		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 数据源配置, 使用DBCP数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- Connection Pooling Info -->
        <property name="maxActive" value="${dbcp.maxActive}"/>
        <property name="maxIdle" value="${dbcp.maxIdle}"/>
        <property name="defaultAutoCommit" value="false"/>
        <!-- 连接Idle一个小时后超时 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000"/>
        <property name="minEvictableIdleTimeMillis" value="3600000"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        <property name="rollbackOnCommitFailure" value="true" />
    </bean>
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <!--  <bean id="dataSourceAspect" class="com.br.antifroud.base.dataSource1.DataSourceAspect" />   -->
    <!-- 需要引入aop的命名空间 -->
    <aop:config>
        <!-- 切入点指明了在所有方法产生事务拦截操作   OR (execution(public * com.br.rule.privatebList.service.*.*(..)))-->
        <aop:pointcut id="serviceMethods" expression="(execution(* com.github.weiwei02.activity.service.*Service.*(..)))" />
        <!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"  order="2"  />
        <!--
        <aop:aspect id="c" ref="dataSourceAspect"  order="1">
            <aop:before pointcut-ref="serviceMethods" method="before"/>
        </aop:aspect>   -->
    </aop:config>
    <!-- 需要引入tx的命名空间 -->
    <!-- 这是事务通知操作，使用的事务管理器引用自 transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- read-only : 不启用事务 -->
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="select*" read-only="true" />
            <!-- propagation="REQUIRED": 如果是保存，删除以及修改启用普通事务-->
            <tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"/>
            <tx:method name="submit*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="delete*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="update*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="insert*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="cancel*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="add*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="claim*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="change*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="review*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="start*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>
            <tx:method name="end*" propagation="REQUIRED"  isolation="READ_COMMITTED"/>

            <!-- start 以start和end开头的方法会被  SERIALIZABLE  隔离级别的事务控制，可能会影响性能，除强事务需求外，最好不要使用-->
            <tx:method name="serializable*" propagation="REQUIRED" isolation="SERIALIZABLE"/>
            <!-- end 以start和end开头的方法会被  SERIALIZABLE  隔离级别的事务控制，可能会影响性能，除强事务需求外，最好不要使用-->

            <tx:method name="*"   read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--mybatis-psring sessionFactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!--ｘｍｌ文件所在路径-->
        <property name="mapperLocations" value="classpath*:mybatis/mapper/*.xml"/>
        <!--分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=oracle
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <mybatis:scan base-package="com.br.antifroud" annotation="org.springframework.stereotype.Repository"/>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>